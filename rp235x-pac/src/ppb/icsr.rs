#[doc = "Register `ICSR` reader"]
pub type R = crate::R<ICSR_SPEC>;
#[doc = "Register `ICSR` writer"]
pub type W = crate::W<ICSR_SPEC>;
#[doc = "Field `VECTACTIVE` reader - The exception number of the current executing exception"]
pub type VECTACTIVE_R = crate::FieldReader<u16>;
#[doc = "Field `RETTOBASE` reader - In Handler mode, indicates whether there is more than one active exception"]
pub type RETTOBASE_R = crate::BitReader;
#[doc = "Field `VECTPENDING` reader - The exception number of the highest priority pending and enabled interrupt"]
pub type VECTPENDING_R = crate::FieldReader<u16>;
#[doc = "Field `ISRPENDING` reader - Indicates whether an external interrupt, generated by the NVIC, is pending"]
pub type ISRPENDING_R = crate::BitReader;
#[doc = "Field `ISRPREEMPT` reader - Indicates whether a pending exception will be serviced on exit from debug halt state"]
pub type ISRPREEMPT_R = crate::BitReader;
#[doc = "Field `STTNS` reader - Controls whether in a single SysTick implementation, the SysTick is Secure or Non-secure"]
pub type STTNS_R = crate::BitReader;
#[doc = "Field `STTNS` writer - Controls whether in a single SysTick implementation, the SysTick is Secure or Non-secure"]
pub type STTNS_W<'a, REG> = crate::BitWriter<'a, REG>;
#[doc = "Field `PENDSTCLR` reader - Allows the SysTick exception pend state to be cleared `FTSSS"]
pub type PENDSTCLR_R = crate::BitReader;
#[doc = "Field `PENDSTCLR` writer - Allows the SysTick exception pend state to be cleared `FTSSS"]
pub type PENDSTCLR_W<'a, REG> = crate::BitWriter<'a, REG>;
#[doc = "Field `PENDSTSET` reader - Indicates whether the SysTick `FTSSS exception is pending"]
pub type PENDSTSET_R = crate::BitReader;
#[doc = "Field `PENDSVCLR` reader - Allows the PendSV exception pend state to be cleared `FTSSS"]
pub type PENDSVCLR_R = crate::BitReader;
#[doc = "Field `PENDSVCLR` writer - Allows the PendSV exception pend state to be cleared `FTSSS"]
pub type PENDSVCLR_W<'a, REG> = crate::BitWriter<'a, REG>;
#[doc = "Field `PENDSVSET` reader - Indicates whether the PendSV `FTSSS exception is pending"]
pub type PENDSVSET_R = crate::BitReader;
#[doc = "Field `PENDNMICLR` reader - Allows the NMI exception pend state to be cleared"]
pub type PENDNMICLR_R = crate::BitReader;
#[doc = "Field `PENDNMICLR` writer - Allows the NMI exception pend state to be cleared"]
pub type PENDNMICLR_W<'a, REG> = crate::BitWriter<'a, REG>;
#[doc = "Field `PENDNMISET` reader - Indicates whether the NMI exception is pending"]
pub type PENDNMISET_R = crate::BitReader;
impl R {
    #[doc = "Bits 0:8 - The exception number of the current executing exception"]
    #[inline(always)]
    pub fn vectactive(&self) -> VECTACTIVE_R {
        VECTACTIVE_R::new((self.bits & 0x01ff) as u16)
    }
    #[doc = "Bit 11 - In Handler mode, indicates whether there is more than one active exception"]
    #[inline(always)]
    pub fn rettobase(&self) -> RETTOBASE_R {
        RETTOBASE_R::new(((self.bits >> 11) & 1) != 0)
    }
    #[doc = "Bits 12:20 - The exception number of the highest priority pending and enabled interrupt"]
    #[inline(always)]
    pub fn vectpending(&self) -> VECTPENDING_R {
        VECTPENDING_R::new(((self.bits >> 12) & 0x01ff) as u16)
    }
    #[doc = "Bit 22 - Indicates whether an external interrupt, generated by the NVIC, is pending"]
    #[inline(always)]
    pub fn isrpending(&self) -> ISRPENDING_R {
        ISRPENDING_R::new(((self.bits >> 22) & 1) != 0)
    }
    #[doc = "Bit 23 - Indicates whether a pending exception will be serviced on exit from debug halt state"]
    #[inline(always)]
    pub fn isrpreempt(&self) -> ISRPREEMPT_R {
        ISRPREEMPT_R::new(((self.bits >> 23) & 1) != 0)
    }
    #[doc = "Bit 24 - Controls whether in a single SysTick implementation, the SysTick is Secure or Non-secure"]
    #[inline(always)]
    pub fn sttns(&self) -> STTNS_R {
        STTNS_R::new(((self.bits >> 24) & 1) != 0)
    }
    #[doc = "Bit 25 - Allows the SysTick exception pend state to be cleared `FTSSS"]
    #[inline(always)]
    pub fn pendstclr(&self) -> PENDSTCLR_R {
        PENDSTCLR_R::new(((self.bits >> 25) & 1) != 0)
    }
    #[doc = "Bit 26 - Indicates whether the SysTick `FTSSS exception is pending"]
    #[inline(always)]
    pub fn pendstset(&self) -> PENDSTSET_R {
        PENDSTSET_R::new(((self.bits >> 26) & 1) != 0)
    }
    #[doc = "Bit 27 - Allows the PendSV exception pend state to be cleared `FTSSS"]
    #[inline(always)]
    pub fn pendsvclr(&self) -> PENDSVCLR_R {
        PENDSVCLR_R::new(((self.bits >> 27) & 1) != 0)
    }
    #[doc = "Bit 28 - Indicates whether the PendSV `FTSSS exception is pending"]
    #[inline(always)]
    pub fn pendsvset(&self) -> PENDSVSET_R {
        PENDSVSET_R::new(((self.bits >> 28) & 1) != 0)
    }
    #[doc = "Bit 30 - Allows the NMI exception pend state to be cleared"]
    #[inline(always)]
    pub fn pendnmiclr(&self) -> PENDNMICLR_R {
        PENDNMICLR_R::new(((self.bits >> 30) & 1) != 0)
    }
    #[doc = "Bit 31 - Indicates whether the NMI exception is pending"]
    #[inline(always)]
    pub fn pendnmiset(&self) -> PENDNMISET_R {
        PENDNMISET_R::new(((self.bits >> 31) & 1) != 0)
    }
}
impl W {
    #[doc = "Bit 24 - Controls whether in a single SysTick implementation, the SysTick is Secure or Non-secure"]
    #[inline(always)]
    #[must_use]
    pub fn sttns(&mut self) -> STTNS_W<ICSR_SPEC> {
        STTNS_W::new(self, 24)
    }
    #[doc = "Bit 25 - Allows the SysTick exception pend state to be cleared `FTSSS"]
    #[inline(always)]
    #[must_use]
    pub fn pendstclr(&mut self) -> PENDSTCLR_W<ICSR_SPEC> {
        PENDSTCLR_W::new(self, 25)
    }
    #[doc = "Bit 27 - Allows the PendSV exception pend state to be cleared `FTSSS"]
    #[inline(always)]
    #[must_use]
    pub fn pendsvclr(&mut self) -> PENDSVCLR_W<ICSR_SPEC> {
        PENDSVCLR_W::new(self, 27)
    }
    #[doc = "Bit 30 - Allows the NMI exception pend state to be cleared"]
    #[inline(always)]
    #[must_use]
    pub fn pendnmiclr(&mut self) -> PENDNMICLR_W<ICSR_SPEC> {
        PENDNMICLR_W::new(self, 30)
    }
}
#[doc = "Controls and provides status information for NMI, PendSV, SysTick and interrupts  

You can [`read`](crate::Reg::read) this register and get [`icsr::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`icsr::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
pub struct ICSR_SPEC;
impl crate::RegisterSpec for ICSR_SPEC {
    type Ux = u32;
}
#[doc = "`read()` method returns [`icsr::R`](R) reader structure"]
impl crate::Readable for ICSR_SPEC {}
#[doc = "`write(|w| ..)` method takes [`icsr::W`](W) writer structure"]
impl crate::Writable for ICSR_SPEC {
    type Safety = crate::Unsafe;
    const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
    const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
}
#[doc = "`reset()` method sets ICSR to value 0"]
impl crate::Resettable for ICSR_SPEC {
    const RESET_VALUE: u32 = 0;
}
